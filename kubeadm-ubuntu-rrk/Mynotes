Storge:

Mutli container:

https://medium.com/bb-tutorials-and-thoughts/understanding-multi-container-pods-12f5780f3956

This is used for testing. Before the POD availabe readinees probe will check wheather your defined service is ready or not . if running  Pod gets available 

Liveneess is like after pod gets started and check the service defined is running or not. like it continous probe the service

 netstat -tulpn | grep LISTEN

image path 

ports:
    - containerPort: 8080
    readinessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
    livenessProbe:
      tcpSocket:
        port: 8080
      initialDelaySeconds: 15
      periodSeconds: 20


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx1
  name: nginx1
spec:
  containers:
  - image: nginx
    name: nginx0
    ports:
    - containerPort: 80
    readinessProbe:
      tcpSocket:
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 10
    livenessProbe:
      tcpSocket:
        port: 80
      initialDelaySeconds: 15
      periodSeconds: 20
  restartPolicy: Never
  
  ===========================================================



 readinessProbe:
      exec:
       command:
          - cat
          - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5



 livenessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5
      
=====================================================================================================================================      
 envFrom:
      - configMapRef:
          name: filename
          
          
  
 volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
  volumes:
  - name: foo
  
  https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/
    configMap:
      -key: mappedfile
      name: myconfigmap
      
      
      externalIPs:
  - 192.168.0.10


https://medium.com/avmconsulting-blog/configmaps-in-kubernetes-k8s-2f2ce79d7e66


apiVersion: v1
kind: Pod
metadata:
  labels:
    run: busybox
  name: busybox
spec:
  containers:
  - args:
    - /bin/sh
    - -c
    - echo hello world;sleep 3600
    image: busybox
    name: busybox
    volumeMounts:
    - name: redis-storage
      mountPath: /data/redis
  - args:
    - /bin/sh
    - -c
    - echo hello world;sleep 3600
    image: centos:7
    name: centos
    volumeMounts:
    - name: redis-storage
      mountPath: /data/redis2
  - args:
    - /bin/sh
    - -c
    - echo hello world;sleep 3600
    image: ubuntu:20.04
    name: ubuntu
    volumeMounts:
    - name: redis-storage
      mountPath: /data/redis3
  volumes:
  - name: redis-storage
    emptyDir: {}
    
  ===============================================================================
    
    configmap:
    ==========
    
  volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
        items:
        - key: SPECIAL_LEVEL
          path: keys
  restartPolicy: Never
  
  
  
  example :
  apiVersion: v1
kind: Pod
metadata:
  labels:
    run: busybox
  name: busybox
spec:
  containers:
  - args:
    - /bin/sh
    - -c
    - while true;do echo amobee;sleep  5;done
    image: nginx
    name: busybox
    volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: nginx1
        items:
        - key: nginx.conf
          path: default.conf
  restartPolicy: Never
  
  Reference : https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
==============================================================

secert:
=======

 kubectl create secret generic mysecret --from-file=ssh-privatekey=/root/.ssh/id_rsa --from-literal=passphrase=password
 
  echo  'cmF2aQ==' | base64 -d
  echo -n 'ravi' | base64
  
  kubectl create secret generic mysecret --from-literal=username=ravikiran --from-literal=passphrase=password --dry-run=client -o yaml > sec.yaml
  
  
  volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret


env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
            
            
=========================================================================================================================



 



